_context.invoke("Nittro.Routing",function(Strings,Arrays){var URLRoute=_context.extend("Nittro.Object",function(mask){URLRoute.Super.call(this),this._.mask=this._prepareMask(mask)},{STATIC:{styles:{"int":parseInt,"float":parseFloat,bool:function(v){return!v.match(/^(?:0|false|)$/)}}},match:function(url){var params=this.tryMatch(url);params&&(Arrays.mergeTree(params,url.getParams()),this.trigger("match",params))},tryMatch:function(url){var match=this._.mask.pattern.exec(url.getPath().replace(/^\/|\/$/g,""));if(!match)return null;var i,n,p,v,params={};for(match.shift(),i=0,n=this._.mask.map.length;i<n;i++)p=this._.mask.map[i],v=decodeURIComponent(match[i]),p.style?params[p.name]=URLRoute.styles[p.style].call(null,v):params[p.name]=v;return params},_prepareMask:function(mask){var match,param,reTop=/^([<\[\]\(])|^([^<\[\]\(]+)/,reParam=/^([^ #>]+)(?: +([^ #>]+))?(?: +#([^ >]+))? *>/,reParen=/\((?!\?:)/g,reOptional=/^\?:/,map=[],pattern=["^"];for(mask=mask.replace(/^\/|\/$/g,"");mask.length;){if(match=reTop.exec(mask),!match)throw new Error("Invalid mask, error near "+mask.substr(0,10));if(mask=mask.substr(match[0].length),"<"===match[1]){if(param=reParam.exec(mask),!param)throw new Error("Invalid mask, error near "+mask.substr(0,10));if(mask=mask.substr(param[0].length),param[2]?param[2]=param[2].replace(reParen,"(?:"):param[2]="[^/]+",pattern.push("(",param[2],")"),param[3]&&!(param[3]in URLRoute.styles))throw new Error("Unknown parameter style: "+param[3]);map.push({name:param[1],style:param[3]||null})}else"["===match[1]?pattern.push("(?:"):"]"===match[1]?pattern.push(")?"):"("===match[1]?pattern.push(reOptional.test(mask)?"(":"(?:"):pattern.push(Strings.escapeRegex(match[2]))}return pattern.push("$"),{pattern:new RegExp(pattern.join("")),map:map}}});_context.register(URLRoute,"URLRoute")},{Strings:"Utils.Strings",Arrays:"Utils.Arrays"}),_context.invoke("Nittro.Routing",function(DOM){var DOMRoute=_context.extend("Nittro.Object",function(selector){DOMRoute.Super.call(this),this._.selector=selector},{match:function(){var matches=DOM.find(this._.selector);matches.length&&this.trigger("match",matches)}});_context.register(DOMRoute,"DOMRoute")},{DOM:"Utils.DOM"}),_context.invoke("Nittro.Routing",function(DOMRoute,URLRoute,Url){var Router=_context.extend("Nittro.Object",function(page,basePath){Router.Super.call(this),this._.page=page,this._.basePath="/"+basePath.replace(/^\/|\/$/g,""),this._.routes={dom:{},url:{}},this._.page.on("setup",this._matchAll.bind(this))},{getDOMRoute:function(selector){return selector in this._.routes.dom||(this._.routes.dom[selector]=new DOMRoute(selector)),this._.routes.dom[selector]},getURLRoute:function(mask){return mask in this._.routes.url||(this._.routes.url[mask]=new URLRoute(mask)),this._.routes.url[mask]},_matchAll:function(){var k,url=Url.fromCurrent();if(url.getPath().substr(0,this._.basePath.length)===this._.basePath){url.setPath(url.getPath().substr(this._.basePath.length));for(k in this._.routes.url)this._.routes.url[k].match(url)}for(k in this._.routes.dom)this._.routes.dom[k].match()}});_context.register(Router,"Router")},{Url:"Utils.Url"}),_context.invoke("Nittro.Routing.Bridges",function(Nittro){if(Nittro.DI){var RoutingDI=_context.extend("Nittro.DI.BuilderExtension",function(containerBuilder,config){RoutingDI.Super.call(this,containerBuilder,config)},{STATIC:{defaults:{basePath:""}},load:function(){var builder=this._getContainerBuilder(),config=this._getConfig(RoutingDI.defaults);builder.addServiceDefinition("router",{factory:"Nittro.Routing.Router()",args:config,run:!0})}});_context.register(RoutingDI,"RoutingDI")}});